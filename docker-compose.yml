services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: gophkeeper-postgres
    environment:
      POSTGRES_DB: gophkeeper
      POSTGRES_USER: gophkeeper
      POSTGRES_PASSWORD: password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - gophkeeper-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U gophkeeper -d gophkeeper"]
      interval: 10s
      timeout: 5s
      retries: 5

  # GophKeeper Server
  server:
    build:
      context: .
      dockerfile: Dockerfile.server
    container_name: gophkeeper-server
    ports:
      - "8080:8080"
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=gophkeeper
      - DB_PASSWORD=password
      - DB_NAME=gophkeeper
      - JWT_SECRET=supersecretkey
      - ENCRYPTION_KEY=32-byte-long-encryption-key-for-aes
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - gophkeeper-network
    restart: unless-stopped

  # GophKeeper Client (interactive)
  client:
    build:
      context: .
      dockerfile: Dockerfile.client
    container_name: gophkeeper-client
    environment:
      - SERVER_URL=http://server:8080
      - ENCRYPTION_KEY=32-byte-long-encryption-key-for-aes
    depends_on:
      - server
    networks:
      - gophkeeper-network
    stdin_open: true
    tty: true
    restart: "no"
    command: ["tail", "-f", "/dev/null"]  # Keep container running

  # Database Admin (pgAdmin)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: gophkeeper-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./scripts/pgadmin-servers.json:/pgadmin4/servers.json:ro
    depends_on:
      - postgres
    networks:
      - gophkeeper-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  gophkeeper-network:
    driver: bridge
